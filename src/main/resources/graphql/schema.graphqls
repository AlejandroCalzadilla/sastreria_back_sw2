type Query {



    findAllCustomers: [Customer]
    findCustomerById(id: ID!): Customer


    findAllRawMaterials(limit: Int, offset: Int): PaginatedRawMaterials!
    findRawMaterialById(id: ID!): RawMaterial


    findAllStore:[Store]
    findStoreById(id: ID!): Store


    findAllNotes(limit: Int, offset: Int): PaginatedNotes!
    findNoteById(id: ID!): Note

    #findAllDetailNotes: [DetailNote]
    #findDetailNoteById(id: ID!): DetailNote

    findAllInventories: [Inventory]
    findInventoryById(id: ID!): Inventory



    findAllAdjustments: [Adjustment]
    findAdjustmentById(id: ID!): Adjustment

    getAllVestimentas: [Vestimenta]
    getVestimentaById(id:ID):Vestimenta



}

type PaginatedRawMaterials {
    items: [RawMaterial]
    total: Int
}

type PaginatedNotes {
    items: [Note]
    total: Int
}

type PaginatedStore {
    items: [Store]
    total: Int
}




type RawMaterial {
    id: ID
    name: String
    unit: String
}

type Store {
    id: ID
    name: String
    address: String
}

type Customer {
    id: ID
    firstName: String
    lastName: String
    ci: String
    birthDate: String
    sex: String
    telephones: [Telephone]
}

type Telephone {
    number: String
    type: String
}

type Note {
    id: ID
    fecha: String
    tipo: String
    montoTotal: Float
    detailNotes: [DetailNote]
}


type DetailNote {
    quantity: Int
    price: Float
}


type Inventory {
    id: ID
    quantity: Int
    rawMaterial: RawMaterial
    store: Store
}


type Adjustment {
    id: ID
    date: String
    new_value: String
}


input DetailNoteInput {
    quantity: Int
    price: Float
}


input TelephoneInput {
    number: String
    type: String
}




type Mutation {



    createAlmacen(name: String!, address: String!): Store
    updateAlmacen(id: ID!, name: String, address: String): Store
    deleteAlmacen(id: ID!): String



    createCustomer(firstName: String!, lastName: String!, ci: String!, birthDate: String!, sex: String!, telephones: [TelephoneInput]!): Customer
    updateCustomer(id: ID!, firstName: String, lastName: String, ci: String, birthDate: String, sex: String, telephones: [TelephoneInput]): Customer
    deleteCustomer(id: ID!): String



    createRawMaterial(name: String!, unit: String!): RawMaterial
    updateRawMaterial(id:ID!,name: String, unit: String): RawMaterial
    deleteRawMaterial(id: ID!): String





    createNote(fecha:String!, tipo: String!, montoTotal: Float!, telephones: [DetailNoteInput]!): Note
    updateNote(id:ID!,fecha:String!, tipo: String!, montoTotal: Float!, telephones: [DetailNoteInput]!): Note
    deleteNote(id: ID!): String





    createInventory(quantity: Int!, rawMaterialId: ID!, storeId: ID!): Inventory
    updateInventory(id: ID!, quantity: Int, rawMaterialId: ID, storeId: ID): Inventory
    deleteInventory(id: ID!): String





    createAdjustment(date: String!, new_value: String!): Adjustment
    updateAdjustment(id: ID!, date: String, new_value: String): Adjustment
    deleteAdjustment(id: ID!): String

    createVestimenta(nombre: String, genero: String, unidadVestimenta: UnidadVestimentaInput, medida: MedidaInput): Vestimenta

}
#vestimenta
type Vestimenta {
    id: ID
    nombre: String
    genero: String
    unidadVestimenta: UnidadVestimenta # Relación 1 a 1 o * con UnidadVestimenta
    medida: Medida # Relación * a * con Medida
}

type UnidadVestimenta {
    id: ID
    estado: Boolean
    medidaVestimenta: MedidaVestimenta # Relación de composición con MedidaVestimenta
}

type Medida {
    id: ID
    nombre: String
    medidaVestimenta: MedidaVestimenta # Relación 1 a 1 o * con MedidaVestimenta
}

type MedidaVestimenta {
    id: ID
    valor: Float
    cambio: Cambio # Relación 1 a 0 o 1 con Cambio
}

type Cambio {
    id: ID
    fecha: String
    nuevo_valor: Float
}

input UnidadVestimentaInput {
    id: ID
    estado: Boolean
    medidaVestimenta: MedidaVestimentaInput # Relación de composición con MedidaVestimenta
}


input MedidaVestimentaInput {
    id: ID
    valor: Float
    cambio: CambioInput # Relación 1 a 0 o 1 con Cambio
}

input MedidaInput {
    id: ID
    nombre: String
    medidaVestimenta: MedidaVestimentaInput # Relación 1 a 1 o * con MedidaVestimenta

}

input CambioInput {
    id: ID
    fecha: String
    nuevo_valor: Float
}

input VestimentaInput {
    id: ID
    nombre: String
    genero: String
    unidadVestimentas: UnidadVestimentaInput # Cambiado a un arreglo
    medidas: MedidaInput # Cambiado a un arreglo
}


